{
	"name": "dataflow_Aggregate_Data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dataset_NYC_Payroll_History",
						"type": "DatasetReference"
					},
					"name": "datalakePayrollHistory"
				},
				{
					"dataset": {
						"referenceName": "dataset_sql_NYC_Payroll_Data",
						"type": "DatasetReference"
					},
					"name": "SQLPayrollCurrent"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "table_synapse_nycpayroll_summary",
						"type": "DatasetReference"
					},
					"name": "synapsePayrollSummary"
				}
			],
			"transformations": [
				{
					"name": "unionCurrentAndHistoryData"
				},
				{
					"name": "filterOnFiscalYear",
					"description": "Add expression filterfor the "
				},
				{
					"name": "TotalPaid"
				},
				{
					"name": "aggregateAgencyNFiscalYear"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Param_FiscalYear as integer (2021)",
				"}",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> datalakePayrollHistory",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SQLPayrollCurrent",
				"datalakePayrollHistory, SQLPayrollCurrent union(byName: true)~> unionCurrentAndHistoryData",
				"unionCurrentAndHistoryData filter(FiscalYear>=$Param_FiscalYear) ~> filterOnFiscalYear",
				"filterOnFiscalYear derive(TotalPaid = RegularGrossPaid+TotalOTPaid+TotalOtherPay) ~> TotalPaid",
				"TotalPaid aggregate(groupBy(AgencyName,",
				"          FiscalYear),",
				"     TotalPaid = sum(TotalPaid)) ~> aggregateAgencyNFiscalYear",
				"aggregateAgencyNFiscalYear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> synapsePayrollSummary"
			]
		}
	}
}